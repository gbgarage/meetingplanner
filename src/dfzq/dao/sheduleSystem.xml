<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE sqlMap
        PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
        "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap>

    <!-- Use type aliases to avoid typing the full classname every time. -->

    <typeAlias alias="Fund" type="dfzq.model.Fund"/>
    <typeAlias alias="OneOnOneMeetingRequest" type="dfzq.model.OneOnOneMeetingRequest"/>
    <typeAlias alias="Company" type="dfzq.model.Company"/>
    <typeAlias alias="Availability" type="dfzq.model.Availability"/>


    <insert id="insertFund" parameterClass="Fund">
        insert into fund( fund_name, phone_number,contact) values (
        #fundName#,#phoneNumber#,#contactor#)

        <selectKey resultClass="int" keyProperty="id">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>


    <insert id="insertOneOnOneMeetingRequest" parameterClass="OneOnOneMeetingRequest">
        insert into one_on_one_meeting_request (fund_id, company_id) values (#fund.id#,#company.id#)
    </insert>

    <insert id="saveCompanyAvailablility" parameterClass="Availability">
        insert into company_availbility (company_id, time_frame_id) values (#company.id#,#timeFrameId#)
    </insert>


    <insert id="saveCompany" parameterClass="Company">
        insert into company( name, contact) values (#name#,#contact#)

        <selectKey resultClass="int" keyProperty="id">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>


    <select id="getCompanyByName" parameterClass="string" resultClass="Company">
      select id as id , name as name, contact as contact
      from company
      where name=#name#


    </select>

    <select id="loadAvailableMeetingRequest" parameterClass="map" resultClass="OneOnOneMeetingRequest">
          select  one.company_id as companyId , one.fund_id as fundId
from company c inner join company_availbility a
on c.id=a.company_id
inner join one_on_one_meeting_request one
on one.company_id= c.id
where a.time_frame_id in $timeFrame$ and a.time_frame_id not in $otherTimeFrame$
group by  one.company_id , one.fund_id


    </select>

    <select id="getCompanyById" parameterClass="int" resultClass="Company">
        select id as id , name as name, contact as contact
      from company
      where id=#id#
    </select>


    <select id="getFundById" parameterClass="int" resultClass="Fund">
        select id as id , fund_name as fundName, phone_number as phoneNumber ,contact as contactor
      from fund
      where id=#id#
    </select>

    <select id="countTheAvailableTime" parameterClass="map" resultClass="int">
        select count(*)
        from company_availbility
        where company_id=#companyId# and time_frame_id in $companyAvailableTimeFrame$

    </select>


</sqlMap>